#include "functions.h"

unsigned char substitute(int index) {

	static unsigned char sbox[256] = {
	   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
	};

	return sbox[index];
}

unsigned char reverse_substitute(unsigned char byte) {
	static unsigned char rsbox[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb
	, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb
	, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e
	, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25
	, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92
	, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84
	, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06
	, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b
	, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73
	, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e
	, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b
	, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4
	, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f
	, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef
	, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61
	, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

	return rsbox[byte];
}


void rotate_left(unsigned char* byte_array) {

	unsigned char temp;

	temp = byte_array[0];

	for (int i = 0; i < 3; i++)
		byte_array[i] = byte_array[i + 1];

	byte_array[3] = temp;
}

int findIndexInsBox(char index) {

	static unsigned char sBoxIndexes[256] = {
	   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	   0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	   0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	   0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	   0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	   0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	   0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	   0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
	};

	// locates index of any hex value and returns it
	for (int i = 0; i < 256; i++) {
		if (index == sBoxIndexes[i])
			return i;
	}
}

int invIndex(int value) {

	static unsigned char sbox[256] = {
	   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
	};

	int intSbox[256];

	for (int i = 0; i < 256; i++)
		intSbox[i] = (int)sbox[i];

	// finds value in sBox and returns its index (comparision is of its integer values rather than hex)

	for (int i = 0; i < 256; i++) {
		if (value == intSbox[i]) {
			return i;
		}
	}
}

void SubBytes(unsigned char* state) {

	for (int i = 0; i < 16; i++) { 
		int index = findIndexInsBox(state[i]); // find index of that value
			state[i] = substitute(index); // replace with sBox value at that index
	}
}

void InvSubBytes(unsigned char* state) {

	int intState[16];
	
	for (int i = 0; i < 16; i++)
		intState[i] = (int)state[i]; // for integer comparision

	static unsigned char sBoxIndexes[256] = {
	   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	   0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	   0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	   0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	   0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	   0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	   0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	   0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
		};

	for (int i = 0; i < 16; i++) {
		int index = invIndex(intState[i]);
		state[i] = sBoxIndexes[index];
	}
}

void InvShiftRows(unsigned char* state) { // right shift

	// first row not shifted

	// shifting second row
	int i;

	unsigned char temp = state[7];

	for (i = 7; i > 4; i--)
		state[i] = state[i - 1];

	state[4] = temp;

	// shifting third row
	
	unsigned char temp2;
	temp = state[10];
	temp2 = state[11];

	state[10] = state[8];
	state[11] = state[9];
	state[8] = temp;
	state[9] = temp2;

	// shifting fourth row

	temp = state[12];
	state[12] = state[13];
	state[13] = state[14];
	state[14] = state[15];
	state[15] = temp;

}

void ShiftRows(unsigned char* state) { // left shift

	// first row not shifted

	// shifting second row
	int i;

	unsigned char temp = state[4]; 

	for (i = 4; i < 8 - 1; i++)
		state[i] = state[i + 1]; 

	state[i] = temp;

	// shifting third row
	temp = state[8];
	unsigned char temp2 = state[9];

	state[8] = state[10];
	state[9] = state[11];
	state[10] = temp;
	state[11] = temp2;

	//shifting fourth row
	temp = state[12];
	temp2 = state[13];

	state[12] = state[15];
	state[15] = state[14];
	state[13] = temp;
	state[14] = temp2;

}

void addRoundKey(unsigned char* state, unsigned char* roundKey) {

	for (int i = 0; i < 16; i++) {
		state[i] ^= roundKey[i]; // corresponding entries of state and roundKey are xor-ed
	}
}

void tranformByte(unsigned char* byte_array, unsigned char* rCon, int roundNo) {

	// shift byte left
	rotate_left(byte_array);

	// substitute with sBox
	for (int i = 0; i < 4; ++i) {
		int index = findIndexInsBox(byte_array[i]);
		byte_array[i] = substitute(index);
	}

	// xor first entry with appropriate rConstant
	byte_array[0] = byte_array[0] ^ rCon[roundNo-1];
}

void KeyExpansion(unsigned char* cipherkey, unsigned char* expandedkey) {

	// defined rConstants upto 10, which is the number needed for rounds
	unsigned char rCon[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

/*	int j = 3;
	for (int i = 0; i <= 12; i += 4) {
		expandedkey[i] = cipherkey[j];
		j += 4;
	}

	unsigned char temp = expandedkey[0];
	expandedkey[0] = expandedkey[4];
	expandedkey[4] = expandedkey[8];
	expandedkey[8] = expandedkey[12];
	expandedkey[12] = temp;

	for (int i = 0; i <= 12; i += 4) {
		int index = findIndexInsBox(expandedkey[i]);
		expandedkey[i] = substitute(index);
	}

	// first column of new key
	//j = 0;
	for (int i = 0; i <= 12; i += 4) {
		expandedkey[i] = cipherkey[i] ^ expandedkey[i];
	//	j++;
	}

	expandedkey[0] ^= rCon;

	// second column
	j = 1;
	for (int i = 0; i <= 12; i += 4) {
		expandedkey[j] = cipherkey[j] ^ expandedkey[i];
		j += 4;
	}


	// third column
	j = 2;
	for (int i = 1; i <= 13; i += 4) {
		expandedkey[j] = cipherkey[j] ^ expandedkey[i];
		j += 4;
	}

	// fourth column
	j = 3;
	for (int i = 2; i <= 14; i += 4) {
		expandedkey[j] = cipherkey[j] ^ expandedkey[i];
		j += 4;
	} */

	int currentRound = 1; // Round 0 uses unaltered key
	unsigned char byte_array[4];

	// first 16 bytes will be the same (Round 0)
	for (int i = 0; i < 16; i++)
		expandedkey[i] = cipherkey[i];

	// 10 rounds
	for (int count = 16; count < (16 * 11); ) {

		for (int i = 0; i < 4; i++)
			byte_array[i] = expandedkey[count - 4 + i];  // going backwards one byte to copy last four bits over to the byte array

		if (count % 16 == 0) { // a new round has started
			tranformByte(byte_array, rCon, currentRound);
			currentRound++;
		}

		for (int i = 0; i < 4; i++) {
			expandedkey[count] = expandedkey[count - 16] ^ byte_array[i]; // our byte is xor-ed with the corresponding byte from the previous round ( - 16 shifts a row backwards) 
			count++;
		}
	}

}

unsigned char multiplyTables(unsigned char value, int option) {

	// these tables carry the fixed values of multiplication in Galois fields (by 2, 3, 9, 11, 13, 14)

	unsigned char Indexes[256] = {

	   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	   0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	   0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	   0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	   0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	   0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	   0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	   0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
	};

	unsigned char multiplyTwo[256] = {

		0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10 ,0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
		0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30 ,0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
		0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50 ,0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
		0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70 ,0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
		0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90 ,0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
		0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0 ,0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
		0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0 ,0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
		0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0 ,0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
		0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b ,0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
		0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b ,0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
		0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b ,0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
		0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b ,0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
		0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b ,0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
		0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab ,0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
		0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb ,0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
		0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb ,0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
	};

	unsigned char multiplyThree[256] = {

		0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d, 0x14, 0x17, 0x12, 0x11,
		0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d, 0x24, 0x27, 0x22, 0x21,
		0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d, 0x74, 0x77, 0x72, 0x71,
		0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d, 0x44, 0x47, 0x42, 0x41,
		0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
		0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed, 0xe4, 0xe7, 0xe2, 0xe1,
		0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
		0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d, 0x84, 0x87, 0x82, 0x81,
		0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86, 0x8f, 0x8c, 0x89, 0x8a,
		0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6, 0xbf, 0xbc, 0xb9, 0xba,
		0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6, 0xef, 0xec, 0xe9, 0xea,
		0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6, 0xdf, 0xdc, 0xd9, 0xda,
		0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46, 0x4f, 0x4c, 0x49, 0x4a,
		0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76, 0x7f, 0x7c, 0x79, 0x7a,
		0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26, 0x2f, 0x2c, 0x29, 0x2a,
		0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16, 0x1f, 0x1c, 0x19, 0x1a
	};

	unsigned char multiplyNine[256] = {

		0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
		0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
		0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
		0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
		0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
		0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
		0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
		0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
		0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
		0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
		0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
		0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
		0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
		0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
		0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
		0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
	};

	unsigned char multiplyEleven[256] = {

		0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
		0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
		0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
		0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
		0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
		0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
		0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
		0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
		0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
		0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
		0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
		0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
		0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
		0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
		0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
		0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
	};

	unsigned char multiplyThirteen[256] = {

		0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
		0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
		0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
		0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
		0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
		0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
		0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
		0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
		0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
		0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
		0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
		0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
		0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
		0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
		0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
		0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
	};

	unsigned char multiplyFourteen[256] = {

		0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
		0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
		0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
		0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
		0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
		0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
		0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
		0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
		0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
		0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
		0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
		0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
		0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
		0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
		0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
		0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
	};

	switch (option) {

		case 1:
			return value; // no change

		case 2:
			for (int i = 0; i < 256; i++) {
				if (value == Indexes[i])
					return multiplyTwo[i];
			}

			break;

		case 3:
			for (int i = 0; i < 256; i++) {
				if (value == Indexes[i])
					return multiplyThree[i];
			}

			break;


		case 9:
			for (int i = 0; i < 256; i++) {
				if (value == Indexes[i])
					return multiplyNine[i];
			}

			break;

		case 11:
			for (int i = 0; i < 256; i++) {
				if (value == Indexes[i])
					return multiplyEleven[i];
			}

			break;

		case 13:
			for (int i = 0; i < 256; i++) {
				if (value == Indexes[i])
					return multiplyThirteen[i];
			}

			break;

		case 14:
			for (int i = 0; i < 256; i++) {
				if (value == Indexes[i])
					return multiplyFourteen[i];
			}

			break;
	}
}

void MixColumn(unsigned char* state) {

	int matrix[4][4] = {
		2, 3, 1, 1,
		1, 2, 3, 1,
		1, 1, 2, 3,
		3, 1, 1, 2 
	};
	
	unsigned char temp[16];

	for (int i = 0; i < 16; i++)
		temp[i] = state[i];
	
	// row 1 : 2 3 1 1
	temp[0] = multiplyTables(state[0], 2) ^ multiplyTables(state[4], 3) ^ multiplyTables(state[8], 1) ^ multiplyTables(state[12], 1);
	temp[1] = multiplyTables(state[1], 2) ^ multiplyTables(state[5], 3) ^ multiplyTables(state[9], 1) ^ multiplyTables(state[13], 1);
	temp[2] = multiplyTables(state[2], 2) ^ multiplyTables(state[6], 3) ^ multiplyTables(state[10], 1) ^ multiplyTables(state[14], 1);
	temp[3] = multiplyTables(state[3], 2) ^ multiplyTables(state[7], 3) ^ multiplyTables(state[11], 1) ^ multiplyTables(state[15], 1);

	// row 2 : 1 2 3 1
	temp[4] = multiplyTables(state[0], 1) ^ multiplyTables(state[4], 2) ^ multiplyTables(state[8], 3) ^ multiplyTables(state[12], 1);
	temp[5] = multiplyTables(state[1], 1) ^ multiplyTables(state[5], 2) ^ multiplyTables(state[9], 3) ^ multiplyTables(state[13], 1);
	temp[6] = multiplyTables(state[2], 1) ^ multiplyTables(state[6], 2) ^ multiplyTables(state[10], 3) ^ multiplyTables(state[14], 1);
	temp[7] = multiplyTables(state[3], 1) ^ multiplyTables(state[7], 2) ^ multiplyTables(state[11], 3) ^ multiplyTables(state[15], 1);

	// row 3 : 1 1 2 3
	temp[8] = multiplyTables(state[0], 1) ^ multiplyTables(state[4], 1) ^ multiplyTables(state[8], 2) ^ multiplyTables(state[12], 3);
	temp[9] = multiplyTables(state[1], 1) ^ multiplyTables(state[5], 1) ^ multiplyTables(state[9], 2) ^ multiplyTables(state[13], 3);
	temp[10] = multiplyTables(state[2], 1) ^ multiplyTables(state[6], 1) ^ multiplyTables(state[10], 2) ^ multiplyTables(state[14], 3);
	temp[11] = multiplyTables(state[3], 1) ^ multiplyTables(state[7], 1) ^ multiplyTables(state[11], 2) ^ multiplyTables(state[15], 3);

	// row 4 : 3 1 1 2
	temp[12] = multiplyTables(state[0], 3) ^ multiplyTables(state[4], 1) ^ multiplyTables(state[8], 1) ^ multiplyTables(state[12], 2);
	temp[13] = multiplyTables(state[1], 3) ^ multiplyTables(state[5], 1) ^ multiplyTables(state[9], 1) ^ multiplyTables(state[13], 2);
	temp[14] = multiplyTables(state[2], 3) ^ multiplyTables(state[6], 1) ^ multiplyTables(state[10], 1) ^ multiplyTables(state[14], 2);
	temp[15] = multiplyTables(state[3], 3) ^ multiplyTables(state[7], 1) ^ multiplyTables(state[11], 1) ^ multiplyTables(state[15], 2);
	 
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}

void Encrypt(unsigned char* plaintext, unsigned char* cipherkey, unsigned char* ciphertext) {

	unsigned char state[16], expandedkey[176], temp[16];
	int j = 0, i = 0;

	for (int i = 0; i < 16; i++) {
		plaintext[i] -= '0'; // ascii value to decimal
		cipherkey[i] -= '0';
	}

	for (int i = 0; i < 16; i++)
		temp[i] = cipherkey[i];

	// state takes transpose of plaintext
	// cipherkey takes transpose of itself

	for (int i = 0; i <= 12; i += 4, j++) {
		state[i] = plaintext[j];
		cipherkey[i] = temp[j];
	}

	for (int i = 1; i <= 13; i += 4, j++) {
		state[i] = plaintext[j];
		cipherkey[i] = temp[j];
	}

	for (int i = 2; i <= 14; i += 4, j++) {
		state[i] = plaintext[j];
		cipherkey[i] = temp[j];
	}

	for (int i = 3; i <= 15; i += 4, j++) {
		state[i] = plaintext[j];
		cipherkey[i] = temp[j];
	}

	KeyExpansion(cipherkey, expandedkey);

	addRoundKey(state, cipherkey);

	for (i = 1; i < 10; i++) {
		SubBytes(state);
		ShiftRows(state);
		MixColumn(state);

		int index = 16 * i;
		unsigned char* exp = expandedkey + index; // jumps forward 16 bytes for every round
		addRoundKey(state, exp);
	} 

	int index = 16 * i;
	unsigned char* exp = expandedkey + index;

	SubBytes(state);
	ShiftRows(state);
	addRoundKey(state, exp);

	j = 0;

	for (int i = 0; i <= 12; i += 4, j++)
		ciphertext[i] = state[j];

	for (int i = 1; i <= 13; i += 4, j++)
		ciphertext[i] = state[j];

	for (int i = 2; i <= 14; i += 4, j++)
		ciphertext[i] = state[j];

	for (int i = 3; i <= 15; i += 4, j++)
		ciphertext[i] = state[j];

	for (int i = 0; i < 16; i++)
		ciphertext[i] += '0';
}

void Decrypt(unsigned char* ciphertext, unsigned char* cipherkey, unsigned char* plaintext) {

	unsigned char state[16], expandedkey[176], temp[16];
	int j = 0, i = 0;

	for (int i = 0; i < 16; i++) {
		ciphertext[i] -= '0'; // ascii value to decimal
		cipherkey[i] -= '0';
	}

	for (int i = 0; i < 16; i++)
		temp[i] = cipherkey[i];

	// state takes transpose of ciphertext
	// cipherkey takes transpose of itself

	for (int i = 0; i <= 12; i += 4, j++) {
		state[i] = ciphertext[j];
		cipherkey[i] = temp[j];
	}

	for (int i = 1; i <= 13; i += 4, j++) {
		state[i] = ciphertext[j];
		cipherkey[i] = temp[j];
	}

	for (int i = 2; i <= 14; i += 4, j++) {
		state[i] = ciphertext[j];
		cipherkey[i] = temp[j];
	}

	for (int i = 3; i <= 15; i += 4, j++) {
		state[i] = ciphertext[j];
		cipherkey[i] = temp[j];
	}

	KeyExpansion(cipherkey, expandedkey);

	addRoundKey(state, cipherkey);
	InvShiftRows(state);
	InvSubBytes(state);

	for (i = 9; i > 0; i--) {

		int index = 16 * i;
		unsigned char* exp = expandedkey + index; // jumps forward 16 bytes for every round
		addRoundKey(state, exp);

		InvMixColumn(state);
		InvShiftRows(state);
		InvSubBytes(state);
	}

	addRoundKey(state, expandedkey);

	for (int i = 0; i <= 12; i += 4, j++)
		plaintext[i] = state[j];

	for (int i = 1; i <= 13; i += 4, j++)
		plaintext[i] = state[j];

	for (int i = 2; i <= 14; i += 4, j++)
		plaintext[i] = state[j];

	for (int i = 3; i <= 15; i += 4, j++)
		plaintext[i] = state[j];

	for (int i = 0; i < 16; i++)
		plaintext[i] += '0';
}

void InvMixColumn(unsigned char* state) {

	int matrix[4][4] = {
		14, 11, 13, 9,
		9, 14, 11, 13,
		13, 9, 14, 11, 
		11, 13, 9, 14
	};

	unsigned char temp[16];

	for (int i = 0; i < 16; i++)
		temp[i] = state[i];

	// row 1 : 14 11 13 9
	temp[0] = multiplyTables(state[0], 14) ^ multiplyTables(state[4], 11) ^ multiplyTables(state[8], 13) ^ multiplyTables(state[12], 9);
	temp[1] = multiplyTables(state[1], 14) ^ multiplyTables(state[5], 11) ^ multiplyTables(state[9], 13) ^ multiplyTables(state[13], 9);
	temp[2] = multiplyTables(state[2], 14) ^ multiplyTables(state[6], 11) ^ multiplyTables(state[10], 13) ^ multiplyTables(state[14], 9);
	temp[3] = multiplyTables(state[3], 14) ^ multiplyTables(state[7], 11) ^ multiplyTables(state[11], 13) ^ multiplyTables(state[15], 9);

	// row 2 : 9 14 11 13
	temp[4] = multiplyTables(state[0], 9) ^ multiplyTables(state[4], 14) ^ multiplyTables(state[8], 11) ^ multiplyTables(state[12], 13);
	temp[5] = multiplyTables(state[1], 9) ^ multiplyTables(state[5], 14) ^ multiplyTables(state[9], 11) ^ multiplyTables(state[13], 13);
	temp[6] = multiplyTables(state[2], 9) ^ multiplyTables(state[6], 14) ^ multiplyTables(state[10], 11) ^ multiplyTables(state[14], 13);
	temp[7] = multiplyTables(state[3], 9) ^ multiplyTables(state[7], 14) ^ multiplyTables(state[11], 11) ^ multiplyTables(state[15], 13);

	// row 3 : 13 9 14 11
	temp[8] = multiplyTables(state[0], 13) ^ multiplyTables(state[4], 9) ^ multiplyTables(state[8], 14) ^ multiplyTables(state[12], 11);
	temp[9] = multiplyTables(state[1], 13) ^ multiplyTables(state[5], 9) ^ multiplyTables(state[9], 14) ^ multiplyTables(state[13], 11);
	temp[10] = multiplyTables(state[2], 13) ^ multiplyTables(state[6], 9) ^ multiplyTables(state[10], 14) ^ multiplyTables(state[14], 11);
	temp[11] = multiplyTables(state[3], 13) ^ multiplyTables(state[7], 9) ^ multiplyTables(state[11], 14) ^ multiplyTables(state[15], 11);

	// row 4 : 11 13 9 14
	temp[12] = multiplyTables(state[0], 11) ^ multiplyTables(state[4], 13) ^ multiplyTables(state[8], 9) ^ multiplyTables(state[12], 14);
	temp[13] = multiplyTables(state[1], 11) ^ multiplyTables(state[5], 13) ^ multiplyTables(state[9], 9) ^ multiplyTables(state[13], 14);
	temp[14] = multiplyTables(state[2], 11) ^ multiplyTables(state[6], 13) ^ multiplyTables(state[10], 9) ^ multiplyTables(state[14], 14);
	temp[15] = multiplyTables(state[3], 11) ^ multiplyTables(state[7], 13) ^ multiplyTables(state[11], 9) ^ multiplyTables(state[15], 14);

	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
